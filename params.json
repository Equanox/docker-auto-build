{"name":"docker-auto-build","tagline":"Shell script to manage, build and run docker containers out of a git repo","body":"<h1>Docker Auto Build/Run</h1>\r\n\r\n    * cmd line tool for a better workflow building docker images\r\n    * store run cmds inside Dockerfiles\r\n    * speedup workflow in production and development\r\n    * one image -> one container\r\n\r\nThis cmd line tool is great when working without a docker registry. All dockerfiles are stored inside a git repository in a special folder named docker. You can simply include  your private and public git repo using a ADD cmd inside your dockerfile\r\n\r\n<h2>Requirements</h2>\r\nThe repo is tested on ubuntu 14.04 LTS. But should work on all UNIX systems \r\n\r\n    docker\r\n    git\r\n\r\n\r\n<h2>Installation</h2>\r\n```\r\ngit clone https://github.com/Equanox/docker-auto-build\r\ncd docker-auto-build\r\nsudo chmod +x install.sh dab\r\nsudo ./install.sh\r\n```\r\n\r\n<h2>Example</h2>\r\n```\r\ncd docker-auto-build\r\ndab -i \"webhook\" -b -c\r\n```\r\nwait for webhook beeing built. Then c&p the run cmd\r\n```\r\nsudo docker run -i -t -p 127.0.0.1:8080:9001 --restart=always --name=webhook webhook /bin/bash\r\n```\r\nOpen a new terminal and test the webhook inside the docker container using\r\n(if curl is not installed type **sudo apt-get install curl**)\r\n```\r\ncurl -X POST 127.0.0.1:8080/hook?text=HelloWorld\r\n```\r\nEverytime you do an update in your code (e.g. examples/server.py) you can just type..\r\n```\r\ndab -i \"webhook\" -b -r -c\r\n```\r\nto stop+remove the running container and rebuilt your image. This gives you a super fast workflow when testing your code in a local environment.\r\n\r\n\r\n<h2>Get Started</h2>\r\nChoose an existing git repo \r\n\r\n    * Create a folder named docker in the root folder of the repo\r\n    * Create a folder named image (or any other name)  inside the docker folder\r\n    * copy Dockerfile inside the folder named image\r\n\r\nNow you can build your docker image from everywhere inside your git repo.\r\n    \r\n```\r\nsudo dab -b -i \"imagename\"\r\n```\r\nor when inside the image folder\r\n```\r\nsudo dab -b\r\n```\r\n.\r\n\r\nTo include your repo in your docker image just add the line\r\n```\r\nADD image somefolder\r\n```\r\nto your Dockerfile.\r\n\r\nWhen you need to replace a running container with the one from a new build \r\n```\r\nsudo dab -b -i \"imagename\" -r -c\r\n```\r\n*-r* stops and remove all running containers using the name *imagename*\r\n\r\n*-c* shows typicall used run cmds for production and development\r\n\r\nSo you just have to copy & paste the run cmd to restart your container\r\n\r\n\r\n<h2>Contribute</h2>\r\nPlease, only commit to the develop branch. The master branch  always contains a stable version.\r\n\r\n<h2>License</h2>\r\nThis Software is released under the [MIT license](http://opensource.org/licenses/mit-license.php).\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}